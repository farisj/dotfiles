
[[ -s "$HOME/.profile" ]] && source "$HOME/.profile" # Load the default .profile
[[ -s "$HOME/.bashrc" ]] && source "$HOME/.bashrc" # Load the default .bashrc
[[ -s "$HOME/.bash_aliases" ]] && source "$HOME/.bash_aliases" # Load bash_aliases
[[ -s "$HOME/.git-completion.bash" ]] && source "$HOME/.git-completion.bash" # Load Git Auto-completion

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
[[ -s "$HOME/.avn/bin/avn.sh" ]] && source "$HOME/.avn/bin/avn.sh" # load avn

function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "*"
}

#git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/' => get this branch

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/(\1$(parse_git_dirty))/"
}

function parse_git_branch_short {
  parse_git_branch | sed -e "s~jake/cne~*~"
}

CYAN="\[\033[0;36m\]"
PURPLE="\[\033[0;35m\]"
RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
BLUE="\[\033[0;34m\]"
GREEN="\[\033[0;32m\]"
NO_COLOUR="\[\033[0m\]"

PS1="$RED\$(date +%H:%M) \w$YELLOW\$(parse_git_branch)\$ $NO_COLOUR"

function gopwd() {
  if [[ `pwd` = *$GOPATH* ]]; then
    echo `pwd | sed -e "s~$GOPATH\/\(\w*\)~\1~"`
  else
    echo `pwd | sed -e 's/.*\/\(\w*\)/\1/'`
  fi
}

function ps1() {
  if [ $1 = "short" ]; then
    export PS1_LENGTH=short
    export PS1="$RED\$(date +%H:%M) $(gopwd)$YELLOW\$(parse_git_branch_short)\$ $NO_COLOUR"
  elif [ $1 = "long" ]; then
    export PS1_LENGTH=long
    export PS1="$RED\$(date +%H:%M) \w$YELLOW\$(parse_git_branch)\$ $NO_COLOUR"
  else
    echo "'$1' not a valid \$PS1 config."
    echo
    echo "     options: 'short', 'long'"
  fi
}

export PS1_LENGTH=long
export PROMPT_COMMAND=set_ps1

function set_ps1 {
  ps1 $PS1_LENGTH
}

function title {
  echo -ne "\033]0;"$*"\007"
}

# Needs .aws/config such as:
# [default]
# region = us-west-1
# output = json
# cli_follow_urlparam = false
# Replace {{}} mfa with appropriate ids
function amfa() {
  profile='default'
  mfa=$(oathtool --totp -b $(< ~/.token))
  eval `aws sts get-session-token --serial-number {{MFA ARN (ACCOUNT ID)}/{IAM USER} --token-code $mfa --profile $profile | jq -r ". | {AWS_SECRET_ACCESS_KEY: .Credentials.SecretAccessKey, AWS_ACCESS_KEY_ID: .Credentials.AccessKeyId, AWS_SESSION_TOKEN: .Credentials.SessionToken} | to_entries|map(\"export \(.key)=\(.value|tostring)\")|.[]"`
  unset 'export'
  export AWS_DEFAULT_REGION='us-west-1'
  export AWS_REGION='us-west-1'
}
# export PATH="$PATH:/usr/local/opt/mysql@5.7/bin" # Flipped
